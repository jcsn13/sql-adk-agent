# cloudbuild.yaml


# Put your variables here
substitutions:
  _PROJECT_ID: "your-project-id"
  _LOCATION: "region"
  _ROOT_AGENT_MODEL: "gemini-2.5-flash"
  _ANALYTICS_AGENT_MODEL: "gemini-2.5-flash"
  _BASELINE_NL2SQL_MODEL: "gemini-2.5-flash"
  _BIGQUERY_AGENT_MODEL: "gemini-2.5-flash"
  _CHASE_NL2SQL_MODEL: "gemini-2.5-flash"
  _BQ_DATASET_ID: "your-dataset"
  _BQ_PROJECT_ID: "your-project-id"
  _CODE_INTERPRETER_EXTENSION_NAME: "" # Leave it blank for create a new extension
  _NL2SQL_METHOD: "CHASE"
  _APP_ID: "your-agentspace-app-id"
  _AGENT_DISPLAY_NAME: "Name of your agent"
  _AGENT_ICON_URI: "https://fonts.gstatic.com/s/i/short-term/release/googlesymbols/smart_toy/default/24px.svg"
  _TOOL_DESCRIPTION: "Agent description"
  _AUTH_PATH: "projects/${_PROJECT_ID}/locations/global/authorizations/your-auth-id"
  _AUTH_ID: "yout-auth-id"

steps:
  - name: 'python:3.12-slim'
    id: 'build-wheel'
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        set -e # Exit on error
        echo "Python version: $(python --version)"
        echo "Installing Poetry..."
        pip install poetry==1.8.3 # Pinning version for consistency

        echo "Configuring Poetry to not use virtual environments for this build step..."
        # This installs packages into the system site-packages of the container, making them available.
        poetry config virtualenvs.create false

        echo "Installing project dependencies (excluding dev) using Poetry..."
        # This installs dependencies listed in pyproject.toml
        poetry install --no-dev --no-interaction --no-ansi

        echo "Building the wheel using Poetry..."
        # Assumes pyproject.toml is at the root. Output will be in dist/
        poetry build --format=wheel --no-interaction --no-ansi

        echo "Copying wheel to deployment directory..."
        mkdir -p deployment # Ensure deployment directory exists
        cp dist/*.whl deployment/
        echo "Wheel(s) copied to deployment/: $(ls deployment/*.whl)"

  - name: 'python:3.12-slim'
    id: 'deploy-reasoning-engine'
    dir: 'deployment'
    entrypoint: 'bash'
    env:
      - 'GOOGLE_CLOUD_PROJECT=${_PROJECT_ID}'
      - 'GOOGLE_CLOUD_LOCATION=${_LOCATION}'
      - 'ROOT_AGENT_MODEL=${_ROOT_AGENT_MODEL}'
      - 'ANALYTICS_AGENT_MODEL=${_ANALYTICS_AGENT_MODEL}'
      - 'BASELINE_NL2SQL_MODEL=${_BASELINE_NL2SQL_MODEL}'
      - 'BIGQUERY_AGENT_MODEL=${_BIGQUERY_AGENT_MODEL}'
      - 'CHASE_NL2SQL_MODEL=${_CHASE_NL2SQL_MODEL}'
      - 'BQ_DATASET_ID=${_BQ_DATASET_ID}'
      - 'BQ_PROJECT_ID=${_BQ_PROJECT_ID}'
      - 'CODE_INTERPRETER_EXTENSION_NAME=${_CODE_INTERPRETER_EXTENSION_NAME}'
      - 'NL2SQL_METHOD=${_NL2SQL_METHOD}'
      - 'AUTH_ID=${_AUTH_ID}'
    args:
      - '-c'
      - |
        set -e
        echo "Current directory: $(pwd)"
        echo "Listing files in current directory: $(ls -la)"
        # Check if .env is in parent, deploy.py might load it via load_dotenv()
        if [ -f ../.env ]; then echo "Found .env file in ../"; fi

        echo "Installing google-cloud-storage (dependency for deploy.py)..."
        pip install google-cloud-storage

        echo "Installing the agent wheel and its dependencies..."
        WHL_FILE=$(ls *.whl) # Should be sql_agent-0.1-py3-none-any.whl
        if [ -z "$$WHL_FILE" ]; then
          echo "Error: No .whl file found in deployment directory."
          exit 1
        fi
        echo "Installing wheel file: $$WHL_FILE"

        pip install "$$WHL_FILE"

        echo "Verifying agent import..."
        python -c "from sql_agent.agent import root_agent; print('Successfully imported root_agent from sql_agent package')"

        echo "Running deploy.py script to create Reasoning Engine..."
        python deploy.py --create

  - name: 'gcr.io/google.com/cloudsdktool/google-cloud-cli'
    id: 'create-discovery-engine-agent'
    dir: 'deployment'
    entrypoint: 'bash'
    env:
      - 'PROJECT_ID=${_PROJECT_ID}'
      - 'APP_ID=${_APP_ID}'
      - 'AGENT_DISPLAY_NAME=${_AGENT_DISPLAY_NAME}'
      - 'AGENT_ICON_URI=${_AGENT_ICON_URI}'
      - 'TOOL_DESCRIPTION=${_TOOL_DESCRIPTION}'
      - 'AUTH_PATH=${_AUTH_PATH}'
      
    args:
      - '-c'
      - |
        set -e
        echo "Current directory: $(pwd)"
        
        AGENT_RESOURCE_NAME_FILE="agent_resource_name.txt"
        if [ ! -f "$$AGENT_RESOURCE_NAME_FILE" ]; then
          echo "Error: $$AGENT_RESOURCE_NAME_FILE not found in $(pwd)."
          echo "This file should contain the Reasoning Engine resource name and be created by the previous deploy.py step."
          exit 1
        fi
        # Read the path from the file into a shell variable
        ADK_REASONING_ENGINE_PATH_VALUE=$(cat "$$AGENT_RESOURCE_NAME_FILE")
        echo "Using ADK Reasoning Engine Path from deploy.py output: $${ADK_REASONING_ENGINE_PATH_VALUE}"

        echo "Making create_new_agent.sh executable..."
        chmod +x create_new_agent.sh

        echo "Running create_new_agent.sh script..."
        # Set ADK_REASONING_ENGINE_PATH environment variable for the script execution
        ADK_REASONING_ENGINE_PATH="$${ADK_REASONING_ENGINE_PATH_VALUE}" ./create_new_agent.sh

timeout: "1800s"